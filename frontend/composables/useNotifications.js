import { ref } from 'vue'

// Instance globale de notifications
const toastInstance = ref(null)

export const useNotifications = () => {
  const setToastInstance = (instance) => {
    toastInstance.value = instance
  }

  const notify = {
    success(title, message, options = {}) {
      if (toastInstance.value) {
        return toastInstance.value.success(title, message, options)
      }
      console.log(`‚úÖ ${title}: ${message}`)
    },

    error(title, message, options = {}) {
      if (toastInstance.value) {
        return toastInstance.value.error(title, message, options)
      }
      console.error(`‚ùå ${title}: ${message}`)
    },

    warning(title, message, options = {}) {
      if (toastInstance.value) {
        return toastInstance.value.warning(title, message, options)
      }
      console.warn(`‚ö†Ô∏è ${title}: ${message}`)
    },

    info(title, message, options = {}) {
      if (toastInstance.value) {
        return toastInstance.value.info(title, message, options)
      }
      console.info(`‚ÑπÔ∏è ${title}: ${message}`)
    },

    custom(notification) {
      if (toastInstance.value) {
        return toastInstance.value.custom(notification)
      }
      console.log(`üì¢ ${notification.title}: ${notification.message}`)
    },

    clear() {
      if (toastInstance.value) {
        toastInstance.value.clear()
      }
    },

    remove(id) {
      if (toastInstance.value) {
        toastInstance.value.remove(id)
      }
    }
  }

  return {
    notify,
    setToastInstance
  }
}

// Helpers pour les messages courants
export const planningNotifications = {
  visitCreated(visiteur) {
    const { notify } = useNotifications()
    notify.success(
      'Visite cr√©√©e',
      `La visite pour ${visiteur} a √©t√© programm√©e avec succ√®s`
    )
  },

  visitUpdated(visiteur) {
    const { notify } = useNotifications()
    notify.success(
      'Visite modifi√©e',
      `La visite pour ${visiteur} a √©t√© mise √† jour`
    )
  },

  visitDeleted() {
    const { notify } = useNotifications()
    notify.success(
      'Visite supprim√©e',
      'La visite a √©t√© supprim√©e avec succ√®s'
    )
  },

  visitError(action, error) {
    const { notify } = useNotifications()
    notify.error(
      `Erreur lors de ${action}`,
      error?.message || 'Une erreur inattendue s\'est produite'
    )
  },

  loadingError() {
    const { notify } = useNotifications()
    notify.error(
      'Erreur de chargement',
      'Impossible de charger les donn√©es du planning'
    )
  },

  networkError() {
    const { notify } = useNotifications()
    notify.error(
      'Erreur r√©seau',
      'V√©rifiez votre connexion internet',
      { autoDismiss: false }
    )
  },

  validationError(field) {
    const { notify } = useNotifications()
    notify.warning(
      'Donn√©es invalides',
      `Le champ "${field}" est requis ou invalide`
    )
  },

  syncSuccess() {
    const { notify } = useNotifications()
    notify.info(
      'Synchronisation',
      'Les donn√©es ont √©t√© synchronis√©es'
    )
  }
}
