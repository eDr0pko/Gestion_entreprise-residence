// Test des r√©actions
const API_BASE = 'http://localhost:8000/api';

async function testReactions() {
    console.log('=== TEST DES R√âACTIONS ===');

    try {
        // 1. Se connecter avec Marie
        console.log('\n1. Connexion avec Marie...');
        const loginResponse = await fetch(`${API_BASE}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                email: 'marie.durand@residence.com',
                password: 'password123'
            })
        });

        const loginData = await loginResponse.json();
        console.log('Login response:', loginData);

        if (!loginData.success) {
            throw new Error('√âchec de la connexion');
        }

        const token = loginData.data.token;

        // 2. R√©cup√©rer les conversations
        console.log('\n2. R√©cup√©ration des conversations...');
        const conversationsResponse = await fetch(`${API_BASE}/conversations`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        const conversationsData = await conversationsResponse.json();
        console.log('Conversations:', conversationsData);

        if (!conversationsData.success || conversationsData.data.length === 0) {
            throw new Error('Aucune conversation trouv√©e');
        }

        const firstGroupId = conversationsData.data[0].id_groupe_message;

        // 3. R√©cup√©rer les messages du premier groupe
        console.log(`\n3. R√©cup√©ration des messages du groupe ${firstGroupId}...`);
        const messagesResponse = await fetch(`${API_BASE}/messages/${firstGroupId}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        const messagesData = await messagesResponse.json();
        console.log('Messages:', messagesData);

        if (!messagesData.success || messagesData.data.length === 0) {
            throw new Error('Aucun message trouv√©');
        }

        const firstMessageId = messagesData.data[0].id_message;

        // 4. Ajouter une r√©action au premier message
        console.log(`\n4. Ajout d'une r√©action üëç au message ${firstMessageId}...`);
        const reactionResponse = await fetch(`${API_BASE}/messages/${firstMessageId}/reactions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                emoji: 'üëç'
            })
        });

        const reactionData = await reactionResponse.json();
        console.log('Reaction response:', reactionData);

        if (!reactionData.success) {
            throw new Error('√âchec de l\'ajout de r√©action');
        }

        // 5. V√©rifier que la r√©action a √©t√© ajout√©e en r√©cup√©rant les messages √† nouveau
        console.log('\n5. V√©rification que la r√©action a √©t√© ajout√©e...');
        const updatedMessagesResponse = await fetch(`${API_BASE}/messages/${firstGroupId}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        const updatedMessagesData = await updatedMessagesResponse.json();
        const updatedMessage = updatedMessagesData.data.find(m => m.id_message === firstMessageId);
        
        console.log('Message mis √† jour avec r√©actions:', {
            id_message: updatedMessage.id_message,
            contenu_message: updatedMessage.contenu_message.substring(0, 50) + '...',
            reactions: updatedMessage.reactions
        });

        // 6. Essayer de retirer la r√©action (cliquer √† nouveau)
        console.log(`\n6. Suppression de la r√©action üëç du message ${firstMessageId}...`);
        const removeReactionResponse = await fetch(`${API_BASE}/messages/${firstMessageId}/reactions`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                emoji: 'üëç'
            })
        });

        const removeReactionData = await removeReactionResponse.json();
        console.log('Remove reaction response:', removeReactionData);

        console.log('\n‚úÖ TOUS LES TESTS DE R√âACTIONS ONT R√âUSSI !');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

// Ex√©cuter le test
testReactions();
